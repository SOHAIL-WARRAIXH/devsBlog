<%= form_with(model: post, local: true) do |f| %>
  <% if post.errors.any? %>
    <div class="alert alert-danger">
      <h4><%= pluralize(post.errors.count, "error") %> prohibited this post from being saved:</h4>
      <ul>
        <% post.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <%= f.label :images, class: 'form-label' %>
    <%= f.file_field :images, multiple: true, class: 'form-control', id: 'post_images_input' %>
    <div id="image_previews" class="mt-3 d-flex flex-wrap gap-2"></div>
    <% if post.images.attached? %>
      <div class="mt-3">
        <h5>Current Images:</h5>
        <div class="d-flex flex-wraphttp://127.0.0.1:3000/ gap-2">
          <% post.images.each do |image| %>
            <div class="position-relative">
              <%= image_tag image.variant(resize_to_limit: [150, 150]), class: 'img-thumbnail' %>
              <%= link_to "<i class=\"bi bi-x-circle-fill text-danger fs-5\"></i>".html_safe, 
                          active_storage_attachment_path(image), 
                          method: :delete, 
                          data: { confirm: 'Are you sure you want to remove this image?' }, 
                          class: 'position-absolute top-0 start-100 translate-middle badge bg-white rounded-circle' %>
            </div>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>

  <div class="mb-3">
    <%= f.label :caption, class: 'form-label' %>
    <%= f.text_area :caption, class: 'form-control', rows: 5, placeholder: 'Enter your post caption...' %>
  </div>
  
  <div class="mb-3">
    <%= f.submit class: 'btn btn-primary' %>
    <%= link_to 'Cancel', posts_path, class: 'btn btn-outline-secondary' %>
  </div>
<% end %>

<%= content_for :scripts do %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const imagesInput = document.getElementById('post_images_input');
      const previewsContainer = document.getElementById('image_previews');

      if (imagesInput && previewsContainer) {
        imagesInput.addEventListener('change', function(event) {
          previewsContainer.innerHTML = ''; // Clear existing previews
          const files = event.target.files;

          if (files) {
            Array.from(files).forEach(file => {
              const reader = new FileReader();
              reader.onload = (e) => {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.classList.add('img-thumbnail', 'me-2');
                img.style.maxWidth = '150px';
                img.style.maxHeight = '150px';
                previewsContainer.appendChild(img);
              };
              reader.readAsDataURL(file);
            });
          }
        });
      }

      // Re-enable Bootstrap tooltips if they are used elsewhere
      // var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
      // var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      //   return new bootstrap.Tooltip(tooltipTriggerEl)
      // })
    });
  </script>
<% end %> 